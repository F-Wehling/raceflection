#pragma once

#include <MemorySystem.h>

#include <Utilities/Flags.h>

BEGINNAMESPACE

DECLARE_EXCLUSIVE_FLAGS(ResourceType, Animation, Audio, Effect, Light, Material, Mesh, GameObject, Geometry, Physics, Scene, Texture);

struct AnimationSpec;
struct AudioSpec;
struct EffectSpec;
struct GameObjectSpec;
struct GeometrySpec;
struct LightSpec;
struct MaterialSpec;
struct MeshSpec;
struct TextureSpec;
struct PhysicsSpec;

//
/// Interprete a package file generated by the assert pipeline
class PackageSpec {
	typedef struct {
		uint32 type; uint32 size; uint32 hash; uint32 timestamp;
	} EntryHeader;
public:
	typedef ProxyAllocator<DefaultAllocator, policy::NoSync, policy::NoBoundsChecking, policy::IncrementTracking, policy::NoTagging> PackageAllocator;

	PackageSpec(PackageAllocator* pkgAllocator);
	~PackageSpec();
	
	bool import(const Byte* data, size_type size);

	inline const AnimationSpec* getAnimationSpec(int32 idx) const { return m_Animations[idx]; }
	inline const AudioSpec* getAudioSpec(int32 idx) const { return m_Audios[idx]; }
	inline const EffectSpec* getEffectSpec(int32 idx) const { return m_Effects[idx]; }
    inline const GameObjectSpec* getGameObjectSpec(int32 idx) const { return m_GameObjects[idx]; }
	inline const GeometrySpec* getGeometrySpec(int32 idx) const {
		return m_Geometries[idx]; 
	}
	inline const LightSpec* getLightSpec(int32 idx) const { return m_Lights[idx]; }
	inline const MaterialSpec* getMaterialSpec(int32 idx) const { return m_Materials[idx]; }
	inline const MeshSpec* getMeshSpec(int32 idx) const { return m_Meshs[idx]; }
    inline const PhysicsSpec* getPhysicsSpec(int32 idx) const { return m_Physics[idx]; }
    inline const TextureSpec* getTextureSpec(int32 idx) const { return m_Textures[idx]; }

	inline uint32 getResourceCount() const { return m_numberOfResources; }
	inline uint32 getAnimationCount() const { return m_numberOfAnimation; }
	inline uint32 getAudioCount() const { return m_numberOfAudio; }
	inline uint32 getEffectCount() const { return m_numberOfEffects; }
    inline uint32 getGameObjectCount() const { return m_numberOfGameObjects; }
    inline uint32 getGeometryCount() const { return m_numberOfGeometry; }
	inline uint32 getLightCount() const { return m_numberOfLight; }
	inline uint32 getMaterialCount() const { return m_numberOfMaterial; }
	inline uint32 getMeshCount() const { return m_numberOfMesh; }
    inline uint32 getPhysicsCount() const { return m_numberOfPhysics; }
    inline uint32 getTextureCount() const { return m_numberOfTextures; }
	

private:
	EntryHeader* readHeader(const Byte* buffer, uint32& offset);

private:
	typedef const AnimationSpec* CAnSPtr;
	typedef const AudioSpec* CAuSPtr;
	typedef const EffectSpec* CEfSPtr;
    typedef const GameObjectSpec* CGoSPtr;
	typedef const GeometrySpec* CGeSPtr;
	typedef const LightSpec* CLiSPtr;
	typedef const MaterialSpec* CMaSPtr;
	typedef const MeshSpec* CMeSPtr;
	typedef const TextureSpec* CTeSPtr;
    typedef const PhysicsSpec* CPhSPtr;

	CAnSPtr* m_Animations;
	CAuSPtr* m_Audios;
	CEfSPtr* m_Effects;
    CGoSPtr* m_GameObjects;
	CGeSPtr* m_Geometries;
	CLiSPtr* m_Lights;
	CMaSPtr* m_Materials;
	CMeSPtr* m_Meshs;
	CTeSPtr* m_Textures;
    CPhSPtr* m_Physics;

	uint32 m_numberOfResources;
	uint32 m_numberOfAnimation;
	uint32 m_numberOfAudio;
	uint32 m_numberOfEffects;
    uint32 m_numberOfGameObjects;
	uint32 m_numberOfGeometry;
	uint32 m_numberOfLight;
	uint32 m_numberOfMaterial;
	uint32 m_numberOfMesh;
	uint32 m_numberOfTextures;
    uint32 m_numberOfPhysics;

	PackageAllocator* m_PkgAllocator;
};


ENDNAMESPACE
