#extension GL_ARB_separate_shader_objects : enable
#include "predefines.fxh"
#include "constantBuffer.fxh"
#include "light.fxh"
#include "material.fxh"
#include "fragOutput.fxh"
#include "renderTargets.fxh"

///////////////////////////////////////////////////////////////////////////////////////////////////
// sampler states are outside of GLSL.
//
SamplerState nearestSampler
{
    TEXTURE_MIN_FILTER = NEAREST;
    TEXTURE_MAG_FILTER = NEAREST;
}

SamplerState skyboxSampleState
{
	TEXTURE_MIN_FILTER = LINEAR;
	TEXTURE_MAG_FILTER = LINEAR;
}

SamplerState linearSampler 
{
	TEXTURE_MIN_FILTER = LINEAR_MIPMAP_LINEAR;
	TEXTURE_MAG_FILTER = LINEAR;
}


//--------------------------------------------------------------------------------------
/// Deferred Rendering Geometry Pass
//--------------------------------------------------------------------------------------
GLSLShader deferredGeometryVS {
	layout(location = 0) in vec3 position;
	layout(location = 1) in vec3 normal;
	layout(location = 2) in vec2 texCoord;
	
	layout(location = 0) out vec3 out_PositionVS;
	layout(location = 1) out vec3 out_Normal;
	layout(location = 2) out vec2 out_TexCoord;
		
	out gl_PerVertex{
		vec4 gl_Position;
	};
		
	void main() {
		// Calculate view space position of the vertex
		vec3 positionVS = vec3(m4_ModelView * vec4(position, 1.0));
		out_PositionVS = positionVS;
	
		out_Normal = normalize(mat3(m4_ModelViewIT) * normal);
		out_TexCoord = texCoord;
		gl_Position = m4_ModelViewProjection * vec4(position, 1.0);
	}		
}

GLSLShader deferredGeometryFS {
	
	layout(location = 0) in vec3 in_PositionVS;
	layout(location = 1) in vec3 in_Normal;
	layout(location = 2) in vec2 in_TexCoord;
	
	layout(location=0) out vec2 outNormal;
	layout(location=1) out vec4 outColor;
	layout(location=2) out vec4 outMaterial;
		
	void main() {
		Material material;
		getMaterial(materialID, material); //get the material associated with this object
		outMaterial = vec4(materialID / 255.0, 0.0, 0.0, 0.0);
		
		//store normal
		outNormal = normalize(in_Normal.xy)*sqrt(in_Normal.z*0.5+0.5);
		
		//store color
		outColor = texture(diffuseSampler, in_TexCoord);
		if(outColor.xyz == transparentColor)
			outColor = material.v4_diffuseColor;
		outColor.w = 1.3;		
	}		
}

//--------------------------------------------------------------------------------------
//    Deferred Rendering Lighting Pass
//--------------------------------------------------------------------------------------
GLSLShader global fullscreenQuadVS
{
	layout(location=1) in vec3 position;
	layout(location=0) in vec3 texCoord;
	
	layout(location=1) out vec3 out_TexCoord;
	
	out gl_PerVertex{
		vec4 gl_Position;
	};
	
    void main()
    {	
		gl_Position = vec4(position,1.0);
		out_TexCoord = texCoord;
	}
}

uniform SamplerCube skyBoxSampler< textureName="SkyBox"; >;

GLSLShader global deferredLightingPS
{
    uniform sampler2D colorTexture;
	uniform sampler2D depthTexture;
	uniform sampler2D normalTexture;
	uniform sampler2D materialTexture;
	
	//uniform sampler2D positionTexture; //only necessary to debug
		
    layout(location=1) in vec3 in_TexCoord;
	
    layout(location = 0) out vec4 color;

	
    void main()
    {	
		float depth = texture(depthTexture, in_TexCoord.xy).x;

		if(depth >= 1.0){
			vec3 eyeDirection = mat3(m4_ModelViewIT) * (m4_ProjectionI * vec4(in_TexCoord.xy * 2.0 - 1.0, 0.0,1.0)).xyz;
			color = texture(skyBoxSampler, -eyeDirection);
			return;
		}
		
		vec3 vs_position = reconstructPosition(depth, in_TexCoord.xy); //
						
		vec3 viewDirection = normalize(-vs_position);
	
		vec3 normal = getNormal(texture(normalTexture,in_TexCoord.xy).xy);
				
		
		vec4 colorTexValue = texture(colorTexture, in_TexCoord.xy);
		vec3 diffuseColor = colorTexValue.xyz;
		vec3 specularColor = diffuseColor * colorTexValue.z;

		int materialID = int(texture(materialTexture, in_TexCoord.xy).x * 255);
		Material material;
		getMaterial(materialID,material);
		
		vec3 resultColor = vec3(0.0, 0.0, 0.0);			
		for(int i = 0 ; i < i_NumLights; ++i){
			Light light; //light struct to be filled
			getLight(i, light); //get the light from the light library on gpu
						
			switch(light.type) 
			{
			case LIGHT_POINT:
			{					
				vec3 lightDir = (light.position - vs_position);
				float dist = length(lightDir);
				lightDir = normalize(lightDir);
				float NdotL = max(dot(normal,normalize(lightDir)),0.0);
				
				if (NdotL > 0.0) {     
					float attenuation = 1.0 / (	light.constantAttenuation + light.linearAttenuation * dist + light.quadraticAttenuation * dist * dist);
					resultColor += attenuation * (diffuseColor /* light.diffuse */) * NdotL;//1.0 * ((diffuseColor * light.diffuse) * NdotL);				 
										
					float NdotV = max(dot(normal, viewDirection),0.0);
					resultColor += (specularColor * light.specular) * pow(NdotV,material.f_shininess);
					
				}
			}
			break;
			case LIGHT_DIRECTIONAL:
			{
				vec3 lightDir = normalize(light.direction);
				float NdotL = max(dot(normal,lightDir),0.0);
				if(NdotL > 0.0){
					resultColor += (diffuseColor /* light.diffuse */) * NdotL;
					float NdotV = max(dot(normal,viewDirection),0.0);
					resultColor += (specularColor * light.specular) * pow(NdotV, material.f_shininess);
				}		
			}
			break;
			case LIGHT_SPOT:
			{
					
				vec3 lightDir = (light.position - vs_position);
				float dist = length(lightDir);
				lightDir = normalize(lightDir);
				float NdotL = max(dot(normal,normalize(lightDir)),0.0);
				
				if (NdotL > 0.0) {     
					float spotEffect = dot(normalize(light.direction), -lightDir);
					if(spotEffect > light.outerConeAngle) {
						 
						spotEffect = pow(spotEffect, light.innerConeAngle - light.outerConeAngle);
						float attenuation = spotEffect / (light.constantAttenuation + light.linearAttenuation * dist + light.quadraticAttenuation * dist * dist);
						resultColor += attenuation * ((diffuseColor /* light.diffuse */) * NdotL);				 
						 
						float NdotV = max(dot(normal,viewDirection),0.0);
						resultColor += attenuation * (specularColor * light.specular) * pow(NdotV,material.f_shininess);
					}
				}
			}
			break;
			case LIGHT_AMBIENT:	//ambient color is represented by an additional lightsource
				resultColor += light.ambient;
			default: 
			break;
			}					
			
		}		
		color = vec4(resultColor,0.0); //1.0 - opacity); //resultColor;
	}
}
///
//

////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
// DeferredRendering Scene Level Technique
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
Technique DeferredRendering
{

	Pass ClearBackbuffer {
        ClearMode = all;
        ClearColor[0] = {0,0.0,0.0,1};
		ClearColor[1] = {1.0, 0.0, 0.0, 1.0};
        CurrentTarget = backbuffer;	
	}

    Pass deferredGeometry
    {
        DEPTH_TEST = true;
        CULL_FACE = false;
        BLEND = false;
        RenderMode = SceneShading;
        RenderGroup = 11;
        ClearMode = all;
        ClearColor[0] = {0,0.0,0.0,1};
        ClearColor[1] = {0.0,0.0,0.0,1};
        ClearColor[2] = {0.0,0.0,0.0,1};
		VertexProgram = deferredGeometryVS;
		FragmentProgram = deferredGeometryFS;
        CurrentTarget = deferredRenderFBO;
        SamplerState(diffuseSampler) = linearSampler;
        FragmentProgram<"material"> = MaterialImpl;
    }
    
    // Fullscreen-quad for light pass
    Pass deferredLighting
    {
        DEPTH_TEST = false;
        CULL_FACE = false;
        BLEND = false;
        RenderMode = render_fullscreen_quad;//DebugQuad3; // Only draws a quad... Won't change any renderstate. So Depth test/Cullface would be needed
        VertexProgram = fullscreenQuadVS;
        SamplerResource(normalTexture) = rt_Normal;
		SamplerResource(colorTexture) = rt_Color;
		SamplerResource(depthTexture) = rt_Depth;
		SamplerResource(materialTexture) = rt_Material;
		//SamplerResource(positionTexture) = dbgPosition;
        SamplerState(skyBoxSampler) = skyboxSampleState;
        FragmentProgram = deferredLightingPS;
        CurrentTarget = PostProcessInput; //write the output directly into the post processing pipeline
		//FragmentProgram<"out"> = DeferredLighting;
		FragmentProgram<"light"> = LightCalculation;
		FragmentProgram<"material"> = MaterialImpl;
		FragmentProgram<"deferredInterpretation"> = deferredBufferInterpretation;
    }
}