#include "predefines.fxh"
#include "constantBuffer.fxh"
#include "renderTargets.fxh"

GLSLShader fxaaFS {
	uniform sampler2D finalColorTexture;
	/*
	uniform sampler2D depthTexture;
	uniform sampler2D normalTexture;
	uniform sampler2D materialTexture;
	*/
	//uniform sampler2D positionTexture; //only necessary to debug
	
#define FXAA_REDUCE_MIN   (1.0/128.0)
#define FXAA_REDUCE_MUL   (1.0/8.0)
#define FXAA_SPAN_MAX     8.0

    layout(location=1) in vec3 in_TexCoord;
	
    layout(location = 0) out vec4 color;
    
	vec4 FxaaMain(sampler2D tex, vec2 pos, vec2 rcpFrame){
	  vec3 rgbNW = texture2DLodOffset(tex, pos.xy, 0.0, ivec2(-1, 1)).xyz;
	  vec3 rgbNE = texture2DLodOffset(tex, pos.xy, 0.0, ivec2( 1, 1)).xyz;
	  vec3 rgbSW = texture2DLodOffset(tex, pos.xy, 0.0, ivec2(-1,-1)).xyz;
	  vec3 rgbSE = texture2DLodOffset(tex, pos.xy, 0.0, ivec2( 1,-1)).xyz;
	  vec3 rgbM  = texture2DLodOffset(tex, pos.xy, 0.0, ivec2(0,0)).xyz;
	  
	  vec3 luma = vec3(0.299, 0.587, 0.114);
	  float lumaNW = dot(rgbNW, luma);
	  float lumaNE = dot(rgbNE, luma);
	  float lumaSW = dot(rgbSW, luma);
	  float lumaSE = dot(rgbSE, luma);
	  float lumaM  = dot(rgbM,  luma);
	  
	  float lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));
	  float lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));
	  
	  vec2 dir; 
	  dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));
	  dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));
	  
	  float dirReduce = max(
	      (lumaNW + lumaNE + lumaSW + lumaSE) * (0.25 * FXAA_REDUCE_MUL),
	      FXAA_REDUCE_MIN);
	  float rcpDirMin = 1.0/(min(abs(dir.x), abs(dir.y)) + dirReduce);
	  dir = min(vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX), 
		max(vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX), 
		dir * rcpDirMin)) * rcpFrame.xy;
		
	  vec3 rgbA = (1.0/2.0) * (
	      texture2DLodOffset(tex, pos.xy + dir / -6.0, 0.0, ivec2(0,0)).xyz +
	      texture2DLodOffset(tex, pos.xy + dir / 6.0, 0.0, ivec2(0,0)).xyz);
	  vec3 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (
	      texture2DLodOffset(tex, pos.xy + dir / -2.0, 0.0, ivec2(0,0)).xyz +
	      texture2DLodOffset(tex, pos.xy + dir / 2.0, 0.0, ivec2(0,0)).xyz);
	  float lumaB = dot(rgbB, luma);
	  if((lumaB < lumaMin) || (lumaB > lumaMax)) return vec4(rgbA, 1.0);
	  return vec4(rgbB, 1.0); 
	}
	
	void main(){
	    vec2 rcpFrame;
	    rcpFrame.x = 1.0 / iv2_ViewportSize.x;
	    rcpFrame.y = 1.0 / iv2_ViewportSize.y;
	  
	    color = FxaaMain(finalColorTexture, in_TexCoord.xy, rcpFrame);
	}
}

SamplerState linearSamplerFxaa{
  TEXTURE_MIN_FILTER = LINEAR;
  TEXTURE_MAG_FILTER = LINEAR;
}

Technique FXAA
{    
    Pass fxaaComputation
    {
        DEPTH_TEST = false;
        CULL_FACE = false;
        BLEND = false;
        RenderMode = render_fullscreen_quad;//DebugQuad3; // Only draws a quad... Won't change any renderstate. So Depth test/Cullface would be needed
        VertexProgram = fullscreenQuadVS;
		SamplerResource(finalColorTexture) = rt_PostProcessInput;
		SamplerState(finalColorTexture) = linearSamplerFxaa;
        FragmentProgram = fxaaFS;
        CurrentTarget = PostProcessOutput;
    }
	
    Pass blitBackToInput {	
		ClearMode = all;
		ClearColor = {0.0, 0.0, 0.0, 1.0};
		BlitFBOToActiveTarget = PostProcessOutput;
        CurrentTarget = PostProcessInput;
    }
}