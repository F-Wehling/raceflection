#include "predefines.fxh"
#include "constantBuffer.fxh"
#include "renderTargets.fxh"

GLSLShader motionBlurFS {
	uniform sampler2D finalColorTexture;
	uniform sampler2D depthTexture;
	/*
	uniform sampler2D normalTexture;
	uniform sampler2D materialTexture;
	*/
	//uniform sampler2D positionTexture; //only necessary to debug
	
#define MOTION_BLUR_SAMPLES 4

#define M_PI 3.1415926535897932384626433832795

    layout(location=1) in vec3 in_TexCoord;
	
    layout(location = 0) out vec4 color;
    
    //TODO: Mask car out of Motion Blur
    
	vec4 MotionBlurMain(sampler2D tex, sampler2D depthTex, vec2 inPos){
	  float zOverW = texture2D(depthTex, inPos).r;  
	  vec4 h = vec4(inPos.x * 2 - 1, inPos.y * 2 - 1,  zOverW, 1);  
	  vec4 d = m4_ViewProjectionI * h;  
	  vec4 currentWorldPos = d / d.w;  
	  
	  vec4 currentScreenPos = h;  
	  vec4 previousScreenPos = m4_PreviousViewProjection * currentWorldPos;  
	  previousScreenPos /= previousScreenPos.w;  
	  vec2 velocity = (currentScreenPos.xy - previousScreenPos.xy)/2.0f;  
	  
	  vec4 color = texture2D(tex, inPos);
	  int count = 1;
	  for(int i = 1; i < MOTION_BLUR_SAMPLES; ++i)  
	  {  
	    vec2 newPos = inPos + velocity;
	    if(newPos.x < 0.0){
	      newPos = inPos + velocity * abs(inPos.x / (2 * velocity.x));
	    } else if (newPos.x > 1.0){
	     newPos = inPos + velocity * abs((1.0 - inPos.x) / (2 * velocity.x));
	    }
	    if(newPos.y < 0.0){
	      newPos = inPos + velocity * abs(inPos.y / (2 * velocity.y));
	    } else if(newPos.y > 1.0){
	      newPos = inPos + velocity * abs((1.0 - inPos.y) / (2 * velocity.y));
	    }
	    inPos = newPos;
	    vec4 currentColor = texture2D(tex, inPos);   
	    color += currentColor; 
	    ++count;
	  }  
	  return color / count;
	}
	
	void main(){
	  color = MotionBlurMain(finalColorTexture, depthTexture, in_TexCoord.xy);
	}
}

SamplerState linearSamplerMotionBlur{
  TEXTURE_MIN_FILTER = LINEAR;
  TEXTURE_MAG_FILTER = LINEAR;
  TEXTURE_WRAP_S = MIRROR;
  TEXTURE_WRAP_T = MIRROR;
  TEXTURE_WRAP_R = MIRROR;
}

Technique MotionBlur
{    
    Pass motionBlurComputation
    {
        DEPTH_TEST = false;
        CULL_FACE = false;
        BLEND = false;
		ClearMode = all;
		ClearColor = {0.0, 0.0, 0.0, 1.0};
        RenderMode = render_fullscreen_quad;//DebugQuad3; // Only draws a quad... Won't change any renderstate. So Depth test/Cullface would be needed
        VertexProgram = fullscreenQuadVS;
		SamplerResource(finalColorTexture) = rt_PostProcessInput;
		SamplerResource(depthTexture) = rt_Depth;
		SamplerState(finalColorTexture) = linearSamplerMotionBlur;
        FragmentProgram = motionBlurFS;
        CurrentTarget = PostProcessOutput;
    }
	
    Pass blitBackToInput {	
		ClearMode = all;
		ClearColor = {0.0, 0.0, 0.0, 1.0};
		BlitFBOToActiveTarget = PostProcessOutput;
        CurrentTarget = PostProcessInput;
    }
}