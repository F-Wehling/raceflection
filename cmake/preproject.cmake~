if(WIN32)
	set(CMAKE_SYSTEM_NAME "Windows")
#elseif(UNIX)
#	set(CMAKE_SYSTEM_NAME "Unix")
endif()

set(cmake_root ${CMAKE_CURRENT_LIST_DIR})
set(proj_root "${cmake_root}/..")
set(source_root "${CMAKE_CURRENT_SOURCE_DIR}")
set(app_root "${source_root}/application")
set(static_root "${source_root}/static" )
set(shared_root "${source_root}/shared" )
set(extern_root "${proj_root}/sdks/${CMAKE_SYSTEM_NAME}" )
set(output_root "${CMAKE_BINARY_DIR}")
set(output_bin "${output_root}/bin")
set(output_lib "${output_root}/lib")
	
message("SDKs Path: ${extern_root}")
	
#CMake path as path for searching modules
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${cmake_root})
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${extern_root}/CMake)

# First for the generic no-config case (e.g. with mingw) 
set( CMAKE_RUNTIME_OUTPUT_DIRECTORY ${output_bin} )
set( CMAKE_LIBRARY_OUTPUT_DIRECTORY ${output_lib}/lib )
set( CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${output_lib}/lib )
# Second, for multi-config builds (e.g. msvc)
foreach( OUTPUTCONFIG ${CMAKE_CONFIGURATION_TYPES} )
    string( TOUPPER ${OUTPUTCONFIG} OUTPUTCONFIG )
    set( CMAKE_RUNTIME_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${output_bin}/${OUTPUTCONFIG} )
    set( CMAKE_LIBRARY_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${output_lib}/${OUTPUTCONFIG} )
    set( CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${output_lib}/${OUTPUTCONFIG} )
endforeach( OUTPUTCONFIG CMAKE_CONFIGURATION_TYPES )
